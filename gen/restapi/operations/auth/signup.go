// Code generated by go-swagger; DO NOT EDIT.

package auth

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// SignupHandlerFunc turns a function with the right signature into a signup handler
type SignupHandlerFunc func(SignupParams) middleware.Responder

// Handle executing the request and returning a response
func (fn SignupHandlerFunc) Handle(params SignupParams) middleware.Responder {
	return fn(params)
}

// SignupHandler interface for that can handle valid signup params
type SignupHandler interface {
	Handle(SignupParams) middleware.Responder
}

// NewSignup creates a new http.Handler for the signup operation
func NewSignup(ctx *middleware.Context, handler SignupHandler) *Signup {
	return &Signup{Context: ctx, Handler: handler}
}

/*
	Signup swagger:route POST /auth/signup Auth signup

# Signup User

Signup User
*/
type Signup struct {
	Context *middleware.Context
	Handler SignupHandler
}

func (o *Signup) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewSignupParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// SignupBody signup body
//
// swagger:model SignupBody
type SignupBody struct {

	// fullname
	// Required: true
	Fullname *string `json:"fullname"`

	// password
	// Required: true
	// Min Length: 5
	Password *string `json:"password"`

	// username
	// Required: true
	// Min Length: 2
	Username *string `json:"username"`
}

// Validate validates this signup body
func (o *SignupBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateFullname(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SignupBody) validateFullname(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"fullname", "body", o.Fullname); err != nil {
		return err
	}

	return nil
}

func (o *SignupBody) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"password", "body", o.Password); err != nil {
		return err
	}

	if err := validate.MinLength("data"+"."+"password", "body", *o.Password, 5); err != nil {
		return err
	}

	return nil
}

func (o *SignupBody) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("data"+"."+"username", "body", o.Username); err != nil {
		return err
	}

	if err := validate.MinLength("data"+"."+"username", "body", *o.Username, 2); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this signup body based on context it is used
func (o *SignupBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SignupBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignupBody) UnmarshalBinary(b []byte) error {
	var res SignupBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

// SignupOKBody signup o k body
//
// swagger:model SignupOKBody
type SignupOKBody struct {

	// code
	Code int64 `json:"code,omitempty"`

	// message
	Message string `json:"message,omitempty"`
}

// Validate validates this signup o k body
func (o *SignupOKBody) Validate(formats strfmt.Registry) error {
	return nil
}

// ContextValidate validates this signup o k body based on context it is used
func (o *SignupOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *SignupOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SignupOKBody) UnmarshalBinary(b []byte) error {
	var res SignupOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
